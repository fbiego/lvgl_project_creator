[
    {
        "name": "LVGL on Linux",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "CMake",
            "SDL",
            "DRM",
            "Linux"
        ],
        "description": "Example project to use LVGL on top of Linux graphics stack. Currently supported backends are either legacy framebuffer (fbdev), modern DRM/KMS, or SDL2.",
        "shortDescription": "CMake project for Linux devices supporting various display drivers.",
        "urlToClone": "https://github.com/lvgl/lv_port_linux",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/linux/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/linux/logo.svg",
        "branches": [
            "release/v9.2"
        ],
        "settings": [
            {
                "type": "dropdown",
                "label": "Color Depth",
                "options": [
                    {
                        "name": "16 (RGB565)",
                        "value": "16"
                    },
                    {
                        "name": "24 (RGB565)",
                        "value": "24"
                    },
                    {
                        "name": "32 (RGB565)",
                        "value": "32"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define LV_COLOR_DEPTH \\d+",
                        "newContent": "#define LV_COLOR_DEPTH {value}",
                        "filePath": "lv_conf.h"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define LV_USE_PERF_MONITOR .*",
                        "newContent": "#define LV_USE_PERF_MONITOR {value}",
                        "filePath": "lv_conf.h"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Select display driver",
                "options": [
                    {
                        "name": "Linux frame buffer device",
                        "value": "0",
                        "default": "true"
                    },
                    {
                        "name": "DRM",
                        "value": "1"
                    },
                    {
                        "name": "SDL",
                        "value": "2"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "0",
                        "toReplace": "#define LV_USE_LINUX_FBDEV +\\d+",
                        "newContent": "#define LV_USE_LINUX_FBDEV 1",
                        "filePath": "lv_conf.h"
                    },
                    {
                        "ifValue": "1",
                        "toReplace": "#define LV_USE_LINUX_DRM +\\d+",
                        "newContent": "#define LV_USE_LINUX_DRM 1",
                        "filePath": "lv_conf.h"
                    },
                    {
                        "ifValue": "2",
                        "toReplace": "#define LV_USE_SDL +\\d+",
                        "newContent": "#define LV_USE_SDL 1",
                        "filePath": "lv_conf.h"
                    }
                ]
            }
        ]
    },
    {
        "name": "Eclipse Simulator with SDL",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "Eclipse",
            "SDL"
        ],
        "description": "LVGL is written mainly for microcontrollers and embedded systems however you can run the library on your PC as well without any embedded hardware. The code written on PC can be simply copied when your are using an embedded system. The PC simulator is cross platform. Windows, Linux and OSX are supported, however on Windows it's easier to get started with a another simulator project. This project uses Eclipse CDT (as an IDE) and SDL =a low level driver library to open a window, and handle mouse, keyboard etc.)",
        "shortDescription": "Eclipse-based project to run LVGL on PC.",
        "urlToClone": "https://github.com/lvgl/lv_port_pc_eclipse",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/eclipse/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/eclipse/logo.svg",
        "branches": [
            "release/v9.2"
        ],
        "tags": [
            "master",
            "v9.2.2"
        ],
        "settings": [
            {
                "type": "dropdown",
                "label": "Color Depth",
                "options": [
                    {
                        "name": "16 (RGB565)",
                        "value": "16"
                    },
                    {
                        "name": "24 (RGB565)",
                        "value": "24"
                    },
                    {
                        "name": "32 (RGB565)",
                        "value": "32"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define LV_COLOR_DEPTH \\d+",
                        "newContent": "#define LV_COLOR_DEPTH {value}",
                        "filePath": "lv_conf.h"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1"
                    },
                    {
                        "name": "No",
                        "value": "0",
                        "default": "true"
                    }
                ],
                "actions": [
                    {
                        "toReplace": " *#define LV_USE_PERF_MONITOR .*",
                        "newContent": "    #define LV_USE_PERF_MONITOR {value}",
                        "filePath": "lv_conf.h"
                    }
                ]
            }
        ]
    },
    {
        "name": "Simulator project for LVGL embedded GUI Library",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "VSCode",
            "SDL"
        ],
        "description": "LVGL is written mainly for microcontrollers and embedded systems, however you can run the library on your PC as well without any embedded hardware. The code written on PC can be simply copied when you are using an embedded system. The project can use SDL but it can be easily replaced by any other built-in LVGL drivers.",
        "shortDescription": "VSCode-based project to run LVGL on PC.",
        "urlToClone": "https://github.com/lvgl/lv_port_pc_vscode",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/vscode/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/vscode/logo.svg",
        "branches": [
            "release/v9.2"
        ],
        "settings": [
            {
                "type": "dropdown",
                "label": "Color Depth",
                "options": [
                    {
                        "name": "16 (RGB565)",
                        "value": "16"
                    },
                    {
                        "name": "24 (RGB565)",
                        "value": "24"
                    },
                    {
                        "name": "32 (RGB565)",
                        "value": "32"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define LV_COLOR_DEPTH \\d+",
                        "newContent": "#define LV_COLOR_DEPTH {value}",
                        "filePath": "lv_conf.h"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define LV_USE_PERF_MONITOR .*",
                        "newContent": "#define LV_USE_PERF_MONITOR {value}",
                        "filePath": "lv_conf.h"
                    }
                ]
            }
        ]
    },
    {
        "name": "Renesas RA8D1-EK",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "e2 studio",
            "GCC"
        ],
        "hardware": {
            "chipVendor": "Renesas",
            "manufacturer": "Renesas",
            "specs": {
                "MCU": "R7FA8D1BHECBD (Cortex-M85, 480MHz)",
                "RAM": "1MB internal, 64MB external SDRAM",
                "Flash": "2MB internal, 64MB External Octo-SPI Flash",
                "GPU": "Dave2D",
                "Resolution": "480x854",
                "Display Size": "4.5\u201d",
                "Interface": "2-lane MIPI",
                "Color Depth": "24-bit",
                "Technology": "IPS",
                "DPI": "217 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "The EK-RA8D1 evaluation kit enables users to effortlessly evaluate the features of the RA8D1 MCU Group and develop embedded systems applications using Renesas\u2019 Flexible Software Package (FSP) and e2 studio IDE. Utilize rich on-board features along with your choice of popular ecosystem add-ons to bring your big ideas to life.  The MCU has a Cortex-M85 core which utilizes the Helium (SIMD) instruction set of Arm. Besides that the chip is equipped with a GPU (called DAVE2D) to off load the MCU.",
        "shortDescription": "Cortex-M85 based 480 MHz MCU driving a 480x854 display.",
        "urlToClone": "https://github.com/lvgl/lv_port_renesas_ek-ra8d1_gcc",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/renesas/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_port_renesas_ek-ra8d1_gcc/master/board_images/renesas-EK-RA8D1.webp",
        "buy_now_links": [
            "https://renesas.com/ek-ra8d1"
        ],
        "branches": [
            "release/v9.2"
        ],
        "settings": [
            {
                "type": "dropdown",
                "label": "Rendering mode",
                "options": [
                    {
                        "name": "Partial",
                        "help": "Faster rendering but with tearing",
                        "value": "0"
                    },
                    {
                        "name": "Direct",
                        "help": "Slower but tearing free",
                        "value": "1",
                        "default": "true"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define DIRECT_MODE \\d+",
                        "newContent": "#define DIRECT_MODE {value}",
                        "filePath": "src/board_init.c"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Use Dave2D GPU",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1"
                    },
                    {
                        "name": "No",
                        "value": "0",
                        "default": "true"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define LV_USE_DRAW_DAVE2D .*",
                        "newContent": "#define LV_USE_DRAW_DAVE2D {value}",
                        "filePath": "src/lv_conf.h"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define LV_USE_PERF_MONITOR .*",
                        "newContent": "#define LV_USE_PERF_MONITOR {value}",
                        "filePath": "src/lv_conf.h"
                    }
                ]
            }
        ]
    },
    {
        "name": "ESP32-S3-EYE",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8 MB external PSRAM",
                "Flash": "8/16 MB",
                "GPU": "None",
                "Resolution": "240x240",
                "Display Size": "1.3\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "LCD",
                "DPI": "261 px/inch",
                "Touch Pad": "None"
            }
        },
        "description": "The ESP32-S3-EYE board consists of two parts: the main board (ESP32-S3-EYE-MB) that integrates the ESP32-S3-WROOM-1 module, camera, uSD card slot, digital microphone, USB port, and function buttons; and the sub board (ESP32-S3-EYE-SUB) that contains an LCD display. The main board and sub board are connected through pin headers.",
        "shortDescription": "LVGL ported to the ESP32-S3-EYE using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/espressif-ESP32-S3-EYE.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "esp32_s3_eye",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "ESP32-S3-Korvo-2",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8 MB external PSRAM",
                "Flash": "8/16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "2.4\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "LCD",
                "DPI": "167 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "The ESP32-S3-Korvo-2 is a multimedia development board based on the ESP32-S3 chip. It is equipped with a two-microphone array which is suitable for voice recognition and near/far-field voice wake-up applications. The board integrates multiple peripherals such as LCD, camera, and microSD card. It also supports JPEG video stream processing. With all of its outstanding features, the board is an ideal choice for the development of low-cost and low-power network-connected audio and video products.",
        "shortDescription": "LVGL ported to the ESP32-S3-Korvo-2 using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/espressif-ESP32-S3-Korvo-2.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "esp32_s3_korvo_2",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "ESP32-S3-LCD-EV-Board",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8/16 MB external PSRAM",
                "Flash": "2/4/8/16 MB",
                "GPU": "None",
                "Resolution": "800x480 / 480x480",
                "Display Size": "4.3\u201d / 3.95\u201d",
                "Interface": "RGB LCD",
                "Color Depth": "24-bit",
                "Technology": "IPS",
                "DPI": "216 px/inch / 171 px/inch",
                "Touch Pad": "Capacitive (GT1151/FT5x06)"
            }
        },
        "description": "ESP32-S3-LCD-EV-Board is a development board for evaluating and verifying ESP32-S3 screen interactive applications. It has the functions of touch screen interaction and voice interaction.",
        "shortDescription": "LVGL ported to ESP32-S3-LCD-EV-Board using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/espressif-ESP32-S3-LCD-EV-Board.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "esp32_s3_lcd_ev_board",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Display",
                "options": [
                    {
                        "name": "800x480",
                        "value": "0",
                        "default": "true"
                    },
                    {
                        "name": "480x480",
                        "value": "1"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toAppend": "CONFIG_BSP_LCD_SUB_BOARD_480_480=y",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "ESP32-S3-BOX-3",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 16 MB external PSRAM",
                "Flash": "16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "2.4\u201d",
                "Interface": "SPI 40 MHz",
                "Color Depth": "16-bit",
                "Technology": "RGB LCD (ILI9341)",
                "DPI": "166 px/inch",
                "Touch Pad": "Capacitive (GT911)"
            }
        },
        "description": "Espressif Systems ESP32-S3-BOX-3 Next-Generation Open-Source AIoT Kit is based on the ESP32-S3 Wi-Fi + BLUETOOTH\u00ae 5 (LE) SoC with AI acceleration capabilities. In addition to the ESP32-S3 SoCs 512KB SRAM, the ESP32-S3-BOX-3 comes with 16MB of Quad flash and 16MB of Octal PSRAM. ESP32-S3-BOX-3 features a 2.4-inch (320 x 240) SPI touchscreen, two digital microphones, a speaker, a Type-C port, and a high-density PCIe connector for hardware extensibility. A speech-recognition framework provides users with an offline AI voice assistant with far-field voice interaction, continuous recognition, wake-up interruption, and the ability to recognize over 200 customizable command words. The device can also be transformed into an online AI chatbot using advanced AIGC development platforms like OpenAI.",
        "shortDescription": "LVGL ported to ESP32-S3-BOX-3 using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/espressif-ESP32-S3-BOX-3.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "esp-box-3",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "ESP32-BOX",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8 MB external PSRAM",
                "Flash": "8/16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "2.4\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "LCD",
                "DPI": "167 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "ESP32-BOX is an AI voice development kit that is based on Espressif\u2019s ESP32-S3 with AI capabilities. In addition to the touch screen, it features a dual microphone, a speaker, and two Pmod\u2122-compatible headers which allow for the extensibility of the hardware. It uses a Type-C USB connector that provides 5 V of power input, while also supporting serial and JTAG debugging, as well as a programming interface; all through the same connector.",
        "shortDescription": "LVGL ported to the ESP32-BOX using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/espressif-ESP32-S3-BOX.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "esp-box",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "ESP32-BOX-Lite",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8 MB external PSRAM",
                "Flash": "8/16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "2.4\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "LCD",
                "DPI": "167 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "ESP32-BOX-Lite is an AI voice development kit that is based on Espressif\u2019s ESP32-S3 with AI capabilities. In addition to the touch screen, it features a dual microphone, a speaker, and two Pmod\u2122-compatible headers which allow for the extensibility of the hardware. It uses a Type-C USB connector that provides 5 V of power input, while also supporting serial and JTAG debugging, as well as a programming interface; all through the same connector.",
        "shortDescription": "LVGL ported to the ESP32-BOX-Lite using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/espressif-ESP32-S3-BOX-Lite.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "esp-box-lite",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "M5SDial",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8 MB external PSRAM",
                "Flash": "8/16 MB",
                "GPU": "None",
                "Resolution": "240x240",
                "Display Size": "1.28\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "TFT",
                "DPI": "265 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "As a versatile embedded development board, M5Dial integrates the necessary features and sensors for various smart home control applications. It features a 1.28-inch round TFT touchscreen, a rotary encoder, an RFID detection module, an RTC circuit, a buzzer, and under-screen buttons, enabling users to easily implement a wide range of creative projects.",
        "shortDescription": "LVGL ported to the M5SDial using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/M5Stack-Dial.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "m5dial",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "M5Stack CoreS3",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows",
            "MacOS"
        ],
        "environment": [
            "ESP-IDF"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8/16 MB external PSRAM",
                "Flash": "2/4/8/16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "2.0\u201d",
                "Interface": "SPI",
                "Color Depth": "24-bit",
                "Technology": "LCD",
                "DPI": "200 px/inch",
                "Touch Pad": "Capacitive (FT5x06)"
            }
        },
        "description": "CoreS3 is the third generation of the M5Stack Core series. Powered by the ESP32-S3 solution, this kit features a dual-core Xtensa LX7 processor running at 240MHz. CoreS3 comes equipped with built-in Wi-Fi functionality, enabling seamless connectivity. It boasts 16MB of onboard flash memory and 8MB of PSRAM, providing ample space for program storage.",
        "shortDescription": "LVGL ported to M5Stack CoreS3 using Espressif BSP.",
        "urlToClone": "https://github.com/lvgl/lv_esp_idf.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/espressif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_esp_idf/master/board_images/M5Stack-CoreS3.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Set up [ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html)\n2. `idf.py -p <COMx or /dev/ttyx> flash monitor`",
        "settings": [
            {
                "type": "always",
                "label": "set the BSP dependency",
                "actions": [
                    {
                        "toReplace": "bsp_replaceme",
                        "newContent": "m5stack_core_s3",
                        "filePath": "main/idf_component.yml"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "1",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=y",
                        "filePath": "sdkconfig.defaults"
                    },
                    {
                        "ifValue": "0",
                        "toReplace": "CONFIG_LV_USE_PERF_MONITOR=.+",
                        "newContent": "CONFIG_LV_USE_PERF_MONITOR=n",
                        "filePath": "sdkconfig.defaults"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX Simulator",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "X11",
            "Linux"
        ],
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. This option creates a NuttX project based on the NuttX LVGL defconfig for the simulator and a basic directory structure for your custom LVGL app. This project runs locally and opens an X11 window to display your LVGL app.",
        "shortDescription": "NuttX RTOS simulator project for X11 on Linux",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Run `./setup.sh`.\n4. Run `cd nuttx/`.\n5. Run `make -j$(nproc)`.\n6. Run `./nuttx`.",
        "settings": []
    },
    {
        "name": "NuttX ESP32-S3-LCD-EV-Board",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 8/16 MB external PSRAM",
                "Flash": "2/4/8/16 MB",
                "GPU": "None",
                "Resolution": "800x480 / 480x480",
                "Display Size": "4.3\u201d / 3.95\u201d",
                "Interface": "RGB LCD",
                "Color Depth": "24-bit",
                "Technology": "IPS",
                "DPI": "216 px/inch / 171 px/inch",
                "Touch Pad": "Capacitive (GT1151/FT5x06)"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The Espressif ESP32-S3-LCD-EV-Board is a devboard with a touchscreen based on the ESP32-S3. This option creates a NuttX project for the Espressif ESP32-S3-LCD-EV-Board based on the NuttX LVGL defconfig for esp32s3-lcd-ev and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for ESP32-S3-LCD-EV-Board with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/espressif-ESP32-S3-LCD-EV-Board.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Install the ESP32-S3 Toolchain: `https://nuttx.apache.org/docs/latest/platforms/xtensa/esp32s3/index.html#esp32-s3-toolchain`.\n4. Run `./setup.sh`.\n5. Run `cd nuttx/`.\n6. Run `make -j$(nproc)`.\n7. Run `make -j$(nproc) flash ESPTOOL_PORT=<port> ESPTOOL_BINDIR=./`",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l esp32s3-lcd-ev:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Model",
                "options": [
                    {
                        "name": "v1.5, 480x480",
                        "value": "0",
                        "default": "true"
                    }
                ],
                "actions": [
                    {
                        "ifValue": "0",
                        "toReplace": "yes '' \\| make oldconfig",
                        "newContent": "kconfig-tweak --set-val CONFIG_ESP32S3_I2C0_SCLPIN 48\nkconfig-tweak --set-val CONFIG_ESP32S3_I2C0_SDAPIN 47\nkconfig-tweak --set-val CONFIG_ESP32S3_LCD_DATA6_PIN 8\nkconfig-tweak --set-val CONFIG_ESP32S3_LCD_DATA7_PIN 18\nyes '' | make oldconfig",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX ESP32-S3-BOX-3",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32-S3",
                "RAM": "512 KB internal SRAM, 16 MB external PSRAM",
                "Flash": "16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "2.4\u201d",
                "Interface": "SPI 40 MHz",
                "Color Depth": "16-bit",
                "Technology": "LCD (ILI9341)",
                "DPI": "167 px/inch",
                "Touch Pad": "Capacitive (GT911)"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The Espressif ESP32-S3-BOX-3 is an AIoT kit based on the ESP32-S3. This option creates a NuttX project for the Espressif ESP32-S3-BOX-3 based on the NuttX LVGL defconfig for esp32s3-box and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for ESP32-S3-BOX-3 with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/espressif-ESP32-S3-BOX-3.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Install the ESP32-S3 Toolchain: `https://nuttx.apache.org/docs/latest/platforms/xtensa/esp32s3/index.html#esp32-s3-toolchain`.\n4. Run `./setup.sh`.\n5. Run `cd nuttx/`.\n6. Run `make -j$(nproc)`.\n7. Run `make -j$(nproc) flash ESPTOOL_PORT=<port> ESPTOOL_BINDIR=./`",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig, patch files, and set additional configurations",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "echo -e '\\nCFLAGS += -DLV_COLOR_16_SWAP' >> ../apps/graphics/lvgl/Makefile\nmkdir -p boards/xtensa/esp32s3/esp32s3-box/src/etc/init.d/\ntouch boards/xtensa/esp32s3/esp32s3-box/src/etc/init.d/rcS\necho -e '\\nmy_lvgl_app &' >> boards/xtensa/esp32s3/esp32s3-box/src/etc/init.d/rc.sysinit\necho -e '\\nRCSRCS = etc/init.d/rc.sysinit etc/init.d/rcS' >> boards/xtensa/esp32s3/esp32s3-box/src/Make.defs\n./tools/configure.sh -l esp32s3-box:lvgl-3\nkconfig-tweak --enable CONFIG_FS_ROMFS\nkconfig-tweak --enable CONFIG_ETC_ROMFS",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX ESP-WROVER-KIT",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32",
                "RAM": "520 KB internal SRAM, 4 MB external PSRAM",
                "Flash": "16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "3.2\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "LCD",
                "DPI": "125 px/inch",
                "Touch Pad": "None"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The Espressif ESP-WROVER-KIT is a devboard based on the ESP32. This option creates a NuttX project for the Espressif ESP-WROVER-KIT based on the NuttX LVGL defconfig for esp32-wrover-kit and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for ESP-WROVER-KIT with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/espressif-ESP32-Wrover-kit.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Install the ESP32 Toolchain: `https://nuttx.apache.org/docs/latest/platforms/xtensa/esp32/index.html#esp32-toolchain`.\n4. Run `./setup.sh`.\n5. Run `cd nuttx/`.\n6. Run `make -j$(nproc)`.\n7. Run `make -j$(nproc) flash ESPTOOL_PORT=<port> ESPTOOL_BINDIR=./`",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig, patch files, and set additional configurations",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l esp32-wrover-kit:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX MIMXRT1060-EVK",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "NXP",
            "manufacturer": "NXP",
            "specs": {
                "MCU": "i.MX RT1060",
                "RAM": "256 MB SRAM",
                "Flash": "512+64 MB",
                "GPU": "None",
                "Resolution": "480x272",
                "Display Size": "4.3\u201d",
                "Interface": "RGB parallel",
                "Color Depth": "24-bit",
                "Technology": "LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The NXP MIMXRT1060-EVK is a devboard with an optional touchscreen. This option creates a NuttX project for the MIMXRT1060-EVK based on the NuttX LVGL defconfig for mimxrt1060-evk and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for MIMXRT1060-EVK with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/NXP-MIMXRT1060-EVK.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Run `./setup.sh`.\n4. Run `cd nuttx/`.\n5. Run `make -j$(nproc)`.\n6. Refer to the docs for flashing and debugging info: `https://nuttx.apache.org/docs/latest/platforms/arm/imxrt/boards/imxrt1060-evk/index.html`.",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l mimxrt1060-evk:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX MIMXRT1064-EVK",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "NXP",
            "manufacturer": "NXP",
            "specs": {
                "MCU": "i.MX RT1064",
                "RAM": "256 MB SRAM",
                "Flash": "512+64 MB",
                "GPU": "None",
                "Resolution": "480x272",
                "Display Size": "4.3\u201d",
                "Interface": "RGB parallel",
                "Color Depth": "24-bit",
                "Technology": "LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The NXP MIMXRT1064-EVK is a devboard with an optional touchscreen. This option creates a NuttX project for the MIMXRT1064-EVK based on the NuttX LVGL defconfig for mimxrt1064-evk and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for MIMXRT1064-EVK with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/NXP-MIMXRT1064-EVK.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Run `./setup.sh`.\n4. Run `cd nuttx/`.\n5. Run `make -j$(nproc)`.\n6. Refer to the docs for flashing and debugging info: `https://nuttx.apache.org/docs/latest/platforms/arm/imxrt/boards/imxrt1064-evk/index.html`.",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l mimxrt1064-evk:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX STM32F429I-DISCO",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "STMicroelectronics",
            "manufacturer": "STMicroelectronics",
            "specs": {
                "MCU": "STM32F429ZI",
                "RAM": "256 KB internal SRAM, 8 MB external SDRAM",
                "Flash": "2 MB",
                "GPU": "Chrom-ART / DMA2D",
                "Resolution": "240x320",
                "Display Size": "2.4\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "QVGA TFT LCD",
                "DPI": "167 px/inch",
                "Touch Pad": "None"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The STM32F429I-DISCO is a devboard with a touchscreen based on the STM32F429ZI MCU. This option creates a NuttX project for the STM32F429I-DISCO based on the NuttX LVGL defconfig for stm32f429i-disco and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for STM32F429I-DISCO with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/STM32-F429I-DISCO.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Run `./setup.sh`.\n4. Run `cd nuttx/`.\n5. Run `make -j$(nproc)`.\n6. Refer to the docs for flashing and debugging info: `https://nuttx.apache.org/docs/latest/platforms/arm/stm32f4/index.html#flashing-and-debugging`.",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l stm32f429i-disco:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX STM32F746G-DISCO",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "STMicroelectronics",
            "manufacturer": "STMicroelectronics",
            "specs": {
                "MCU": "STM32F746NG",
                "RAM": "340 KB internal SRAM, 8 MB external SDRAM",
                "Flash": "1 MB",
                "GPU": "Chrom-ART / DMA2D",
                "Resolution": "480x272",
                "Display Size": "4.3\u201d",
                "Interface": "RGB parallel",
                "Color Depth": "16-bit",
                "Technology": "TFT LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The STM32F746G-DISCO is a devboard with a touchscreen based on the STM32F746NG MCU. This option creates a NuttX project for the STM32F746G-DISCO based on the NuttX LVGL defconfig for stm32f746g-disco and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for STM32F746G-DISCO with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/STM32-F746G-DISCO.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Run `./setup.sh`.\n4. Run `cd nuttx/`.\n5. Run `make -j$(nproc)`.\n6. Refer to the docs for flashing and debugging info: `https://nuttx.apache.org/docs/latest/platforms/arm/stm32f7/index.html#flashing-and-debugging`.",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l stm32f746g-disco:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX STM32H745I-DISCO",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "STMicroelectronics",
            "manufacturer": "STMicroelectronics",
            "specs": {
                "MCU": "STM32H745XI",
                "RAM": "1 MB internal SRAM, 8 MB external SDRAM",
                "Flash": "2 MB",
                "GPU": "Chrom-ART / DMA2D",
                "Resolution": "480x272",
                "Display Size": "4.3\u201d",
                "Interface": "RGB parallel",
                "Color Depth": "16-bit",
                "Technology": "TFT LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The STM32H745I-DISCO is a devboard with a touchscreen based on the STM32H745XI MCU. This option creates a NuttX project for the STM32H745I-DISCO based on the NuttX LVGL defconfig for stm32h745i-disco and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for STM32H745I-DISCO with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/STM32-H745I-DISCO.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Run `./setup.sh`.\n4. Run `cd nuttx/`.\n5. Run `make -j$(nproc)`.\n6. Refer to the docs for flashing and debugging info: `https://nuttx.apache.org/docs/latest/platforms/arm/stm32h7/index.html`.",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l stm32h745i-disco:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "NuttX Waveshare RP2040-LCD-1.28",
        "maintainer": "NuttX",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "make",
            "CMake",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "Raspberry Pi",
            "manufacturer": "Waveshare",
            "specs": {
                "MCU": "RP2040",
                "RAM": "264 KB internal SRAM",
                "Flash": "2 MB",
                "GPU": "None",
                "Resolution": "240x240",
                "Display Size": "1.28\u201d diameter",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "IPS (GC9A01A)",
                "DPI": "188 px/inch",
                "Touch Pad": "Capacitive (CST816T)"
            }
        },
        "description": "NuttX is a highly configurable RTOS that implements many POSIX standard interfaces for a familliar development experience and well defined boundaries between components. The Waveshare RP2040-LCD-1.28 is a round touch display module powered by a Raspberry Pi RP2040 MCU. This option creates a NuttX project for the Waveshare RP2040-LCD-1.28 based on the NuttX LVGL defconfig for waveshare-rp2040-lcd-1.28 and a basic directory structure for your custom LVGL app.",
        "shortDescription": "NuttX RTOS project for Waveshare RP2040-LCD-1.28 with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_nuttx.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nuttx/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_nuttx/master/board_images/Raspberry-Pi-RP2040-LCD-1.28.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install the NuttX prerequisites and KConfig frontend: `https://nuttx.apache.org/docs/latest/quickstart/install.html`.\n2. Aditionally, install `unzip`.\n3. Install the Raspberry Pi Pico SDK: `https://nuttx.apache.org/docs/latest/platforms/arm/rp2040/index.html#installation`.\n4. Run `./setup.sh`.\n5. Run `cd nuttx/`.\n6. Run `make -j$(nproc)`.\n7. Copy the UF2 file to the device: `https://nuttx.apache.org/docs/latest/platforms/arm/rp2040/index.html#programming`.",
        "settings": [
            {
                "type": "always",
                "label": "set the defconfig",
                "actions": [
                    {
                        "toReplace": "\\./tools/configure\\.sh -l sim:lvgl_fb",
                        "newContent": "./tools/configure.sh -l waveshare-rp2040-lcd-1.28:lvgl",
                        "filePath": "setup.sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "Zephyr MIMXRT1170-EVKB",
        "maintainer": "Zephyr",
        "hostOperatingsystem": [
            "Windows",
            "Linux",
            "MacOS"
        ],
        "environment": [
            "cmake",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "NXP",
            "manufacturer": "NXP",
            "specs": {
                "MCU": "i.MX RT1176xxA",
                "RAM": "256 MB SRAM",
                "Flash": "16 MB",
                "GPU": "PXP",
                "Resolution": "800x480",
                "Display Size": "4.3\u201d",
                "Interface": "MIPI DSI",
                "Color Depth": "24-bit",
                "Technology": "LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "The Zephyr RTOS is a open source, highly configurable, scalable, secure, modular and vendor neutral real time operating system. The NXP MIMXRT1170-EVK is a devboard with an optional touchscreen. This option creates a Zephyr project for the MIMXRT1170-EVK based on the Zephyr LVGL for mimxrt1170-evk and a basic directory structure for your custom LVGL app.",
        "shortDescription": "Zephyr RTOS project for MIMXRT1170-EVK with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_zephyr",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/zephyr/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_zephyr/main/board_images/NXP-MIMXRT1170-EVK.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install Zephyr on your host machine: `https://docs.zephyrproject.org/latest/develop/getting_started/index.html`.\n2. Run `west build -p -bmimxrt1170_evk@B/mimxrt1176/cm7 --shield rk055hdmipi4ma0 application`.\n3.  Run `west flash` for flashing.\n4. Run `west debug` for debugging.",
        "settings": [
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ]
            }
        ]
    },
    {
        "name": "Zephyr M5Stack Core 2",
        "maintainer": "Zephyr",
        "hostOperatingsystem": [
            "Windows",
            "Linux",
            "MacOS"
        ],
        "environment": [
            "cmake",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "Espressif",
            "manufacturer": "Espressif",
            "specs": {
                "MCU": "ESP32",
                "RAM": "8 MB SRAM",
                "Flash": "16 MB",
                "GPU": "None",
                "Resolution": "320x240",
                "Display Size": "2.1\u201d",
                "Interface": "Parallell 8080 16bit",
                "Color Depth": "14-bit",
                "Technology": "LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "The Zephyr RTOS is a open source, highly configurable, scalable, secure, modular and vendor neutral real time operating system. The NXP MIMXRT1170-EVK is a devboard with an optional touchscreen. This option creates a Zephyr project for the MIMXRT1170-EVK based on the Zephyr LVGL for mimxrt1170-evk and a basic directory structure for your custom LVGL app.",
        "shortDescription": "Zephyr RTOS project for M5Stack Core 2 with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_zephyr",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/zephyr/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_zephyr/main/board_images/M5Stack-Core2.webp",
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Install Zephyr on your host machine: `https://docs.zephyrproject.org/latest/develop/getting_started/index.html`.\n2. Run `west build -pauto -bm5stack_core2/esp32/procpu application`.\n3.  Run `west flash` for flashing.\n4. Run `west debug` for debugging.",
        "settings": [
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ]
            }
        ]
    },
    {
        "name": "LV Port ATS3089P-EVB",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Windows",
            "Linux"
        ],
        "environment": [
            "make",
            "cmake",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "Actions Technology",
            "manufacturer": "Actions Technology",
            "specs": {
                "MCU": "ATS3089P",
                "RAM": "1.1 MB SRAM",
                "Flash": "8 MB",
                "GPU": "VGLite",
                "Resolution": "466x466",
                "Display Size": "4.3\u201d",
                "Interface": "MIPI DSI",
                "Color Depth": "24-bit",
                "Technology": "LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "The Actions Technology ATS3089P-EVB is a smartwatch focused development board with round display plus touch, here is a basic directory structure for your custom LVGL app on top of Actions SDK based on Zephyr RTOS.",
        "shortDescription": "Actions Technology ATS3089P-EVB project with LVGL support",
        "urlToClone": "https://github.com/lvgl/lv_port_actions_technology",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/zephyr/logo.svg"
        ],
        "branches": [
            "release/v9.2"
        ],
        "settings": [
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ]
            }
        ]
    },
    {
        "name": "LV Port FRDM-MCXN947",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Windows",
            "Linux",
            "MacOS"
        ],
        "environment": [
            "make",
            "cmake",
            "Linux"
        ],
        "hardware": {
            "chipVendor": "NXP",
            "manufacturer": "NXP",
            "specs": {
                "MCU": "MCXN-947",
                "RAM": "512 KB SRAM",
                "Flash": "2 MB",
                "GPU": "None",
                "Resolution": "480x320",
                "Display Size": "3.5\u201d",
                "Interface": "SPI",
                "Color Depth": "16-bit",
                "Technology": "LCD",
                "DPI": "128 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "The NXP FRDM-MCXN947 is a devboard with an optional LCD add-on board. This option creates a MCU Expresso with LVGL for FRDM-MCXN947 and a basic directory structure for your custom LVGL app.",
        "shortDescription": "FRDM-MCXN947 MCU expresso project with LVGL support",
        "urlToClone": "https://github.com/lvgl/lv_port_nxp_frdm_mcxn947",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nxp/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_port_nxp_frdm_mcxn947/master/board_images/NXP-FRDM-MCXN947.webp",
        "buy_now_links": [
            "https://www.nxp.com/part/FRDM-MCXN947",
            "https://www.nxp.com/part/LCD-PAR-S035"
        ],
        "branches": [
            "release/v9.2"
        ],
        "settings": [
            {
                "type": "dropdown",
                "label": "Show performance monitor",
                "options": [
                    {
                        "name": "Yes",
                        "value": "1",
                        "default": "true"
                    },
                    {
                        "name": "No",
                        "value": "0"
                    }
                ]
            }
        ]
    },
    {
        "name": "Alif E7 AI/ML AppKit",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux",
            "Windows"
        ],
        "environment": [
            "VS Code",
            "Arm CMSIS Solution"
        ],
        "hardware": {
            "chipVendor": "Alif Semiconductor",
            "manufacturer": "Alif Semiconductor",
            "specs": {
                "MCU": "dual Cortex-M55 - 400 MHz, 160 MHz",
                "RAM": "13.5 internal SRAM, 64 MB external PSRAM",
                "Flash": "64 MB",
                "GPU": "DAVE2D",
                "Resolution": "800x480",
                "Display Size": "4\u201d",
                "Interface": "MIPI LCD",
                "Color Depth": "16-bit",
                "DPI": "216 px/inch",
                "Touch Pad": "Capacitive"
            }
        },
        "description": "The E7 AI/ML AppKit is a peripheral-rich board with the most powerful Alif Ensemble SOC. It has two MCU cores. One is highly performant while the other is highly efficient. The desired core can be selected in VS Code. There is builtin AI/ML hardware and another pair of cores that can run an OS like Linux. The board features WiFi, BLE, a camera, multiple microphones, a headphone connector, an IMU, navigation buttons, and USB.",
        "shortDescription": "A VS Code project for Alif E7 AI/ML AppKit with LVGL",
        "urlToClone": "https://github.com/lvgl/lv_alif.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/alif/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_alif/master/board_images/Alif-AK-E7-AIML.webp",
        "buy_now_links": [
            "https://www.arrow.com/en/products/ak-e7-aiml/alif-semiconductor",
            "https://www.mouser.com/ProductDetail/Alif-Semiconductor/AK-E7-AIML?qs=i8QVZAFTkqRflp1UcqlNNQ%3D%3D"
        ],
        "branches": [
            "release/v9.1"
        ],
        "getStartedInstructions": "Follow the detailed instructions at `https://docs.lvgl.io/master/details/integration/chip/alif.html` to get started.",
        "settings": [
            {
                "type": "dropdown",
                "label": "Board Variant",
                "options": [
                    {
                        "name": "Development Kit gen 1, silicon rev A, board rev B/C",
                        "value": "0"
                    },
                    {
                        "name": "AI/ML Application Kit gen 1, silicon rev A, board rev A",
                        "value": "1"
                    },
                    {
                        "name": "AI/ML Application Kit gen 1, silicon rev A, board rev B",
                        "value": "2"
                    },
                    {
                        "name": "Development Kit gen 2, silicon rev B, internal CoB board",
                        "value": "3"
                    },
                    {
                        "name": "Development Kit gen 2, silicon rev B, board rev A/B/C",
                        "value": "4",
                        "default": "true"
                    },
                    {
                        "name": "AI/ML Application gen 2, silicon rev B, board rev A",
                        "value": "5"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define BOARD_ALIF_DEVKIT_VARIANT\\s+\\d+",
                        "newContent": "#define BOARD_ALIF_DEVKIT_VARIANT {value}",
                        "filePath": "app/board.h"
                    }
                ]
            },
            {
                "type": "dropdown",
                "label": "Panel Variant (if unsure, leave default)",
                "options": [
                    {
                        "name": "E43RB_FW405",
                        "value": "0",
                        "default": "true"
                    },
                    {
                        "name": "E43GB_MW405",
                        "value": "1"
                    },
                    {
                        "name": "E50RA_MW550",
                        "value": "2"
                    }
                ],
                "actions": [
                    {
                        "toReplace": "#define BOARD_ILI9806E_PANEL_VARIANT\\s+\\d+",
                        "newContent": "#define BOARD_ILI9806E_PANEL_VARIANT {value}",
                        "filePath": "app/board.h"
                    }
                ]
            }
        ]
    },
    {
        "name": "Toradex Verdin AM62\u201d",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "Torizon",
            "Yocto"
        ],
        "hardware": {
            "chipVendor": "Texas Instruments",
            "manufacturer": "Toradex",
            "specs": {
                "MPU": "2 64-bit Arm\u00ae Cortex\u00ae-A53 @1.4GHz",
                "MCU": "Arm\u00ae Cortex\u00ae-M4F MCU @400MHz",
                "RAM": "1 GB 16-Bit data bus with inline ECC (1600 MT/s)",
                "Flash": "8GB eMMC Flash",
                "GPU": "PowerVR Rogue AXE-1-16M"
            }
        },
        "description": "The Verdin AM62 is a cost-effective Computer on Module (CoM) based on the TI Sitara AM62x processor, offering up to four Cortex-A53 cores. It provides an attractive entry point into the Verdin ecosystem, with scalability through pin-compatibility with the Verdin iMX8M Mini and Plus modules. Featuring integrated Wi-Fi 4 and Bluetooth 5.2, or optional Wi-Fi 6 and Bluetooth 5.3 for custom configurations, it supports Torizon\u2019s OTA updates, device monitoring, and remote access. Designed for power-constrained applications, the Verdin AM62 includes advanced power management and hardware-based security for secure boot and cryptographic acceleration.",
        "shortDescription": "Powerful Cortex\u00ae-A53 based device for embedded Linux.",
        "urlToClone": "https://github.com/lvgl/lv_port_toradex_verdin_am62.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/texas_instruments/logo.svg",
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/toradex/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_port_toradex_verdin_am62/master/board_images/toradex-verdin-am62.webp",
        "buy_now_links": [
            "https://www.toradex.com/computer-on-modules/verdin-arm-family/ti-am62#buynow"
        ],
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Open the project folder and update the submodules: `git submodule update --init --recursive` \n2. Follw the guide in the [README](https://github.com/lvgl/lv_port_toradex_verdin_am62/blob/master/README.md#getting-started)",
        "settings": []
    },
    {
        "name": "Toradex Verdin imx8mm",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "Torizon",
            "Yocto"
        ],
        "hardware": {
            "chipVendor": "NXP",
            "manufacturer": "Toradex",
            "specs": {
                "MPU": "4 64-bit Arm\u00ae Cortex\u00ae-A53 @1.8GHz",
                "MCU": "Arm\u00ae Cortex\u00ae-M4 MCU @400MHz",
                "RAM": "2 GB LPDDR4 32-Bit data bus with inline ECC (1500 MT/s)",
                "Flash": "16GB eMMC Flash",
                "GPU": "2D: Vivante GC320, 3D: Vivante GCNanoUltra"
            }
        },
        "description": "The Verdin imx8m mini is a cost-effective Computer on Module (CoM) based on the NXP imx8m mini processor, offering up to four Cortex-A53 cores. It features integrated Wi-Fi 5 and Bluetooth 5.3, Torizon\u2019s OTA updates, device monitoring, and remote access. Designed for power-constrained applications, the Verdin imx8m mini includes advanced power management and hardware-based security for secure boot and cryptographic acceleration.",
        "shortDescription": "Powerful Cortex\u00ae-A53 based device for embedded Linux.",
        "urlToClone": "https://github.com/lvgl/lv_port_toradex_verdin_imx8m_mini.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nxp/logo.svg",
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/toradex/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_port_toradex_verdin_imx8m_mini/master/board_images/toradex-imx8mm.webp",
        "buy_now_links": [
            "https://www.toradex.com/computer-on-modules/verdin-arm-family/nxp-imx-8m-mini-nano"
        ],
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Open the project folder and update the submodules: `git submodule update --init --recursive` \n2. Follw the guide in the [README](https://github.com/lvgl/lv_port_toradex_verdin_imx8m_mini/blob/master/README.md#getting-started)",
        "settings": []
    },
    {
        "name": "TI SK-AM62B-P1",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "Yocto",
            "Buildroot"
        ],
        "hardware": {
            "chipVendor": "TI",
            "manufacturer": "TI",
            "specs": {
                "MPU": "AM625 with Quad 64-bit Arm\u00ae Cortex\u00ae-A53 @1.4GHz",
                "MCU": "Arm\u00ae Cortex\u00ae-M4F MCU",
                "RAM": "2 GB DDR4 16-Bit data bus with inline ECC (1600 MT/s)",
                "Flash": "Micro SD Card",
                "GPU": "PowerVR"
            }
        },
        "description": "The Texas Instruments SK-AM62B-P1 starter kit (SK) evaluation module (EVM) is a stand-alone test and development platform built around the AM62x system-on-a-chip (SoC). AM62x processors are comprised of a quad-core 64-bit Arm\u00ae-Cortex\u00ae-A53 microprocessor and single-core Arm Cortex-M4F MCU. It features an HDMI port for up to 2K 60fps displays and two ethernet ports. It has an embedded PowerVR GPU",
        "shortDescription": "Powerful Texas Instruments Cortex\u00ae-A53 based device for embedded Linux.",
        "urlToClone": "https://github.com/lvgl/lv_port_texas_sk-am62b-p1.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/texas_instruments/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_port_texas_sk-am62b-p1/master/board_images/ti-sk-am62b-p1.webp",
        "buy_now_links": [
            "https://www.ti.com/tool/SK-AM62B-P1"
        ],
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Open the project folder and update the submodules: `git submodule update --init --recursive` \n2. Follw the guide in the [README](https://github.com/lvgl/lv_port_texas_sk-am62b-p1/blob/master/README.md#getting-started)",
        "settings": []
    },
    {
        "name": "TI SK-AM62P-LP",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "Yocto",
            "Buildroot"
        ],
        "hardware": {
            "chipVendor": "TI",
            "manufacturer": "TI",
            "specs": {
                "MPU": "AM625P with Quad 64-bit Arm\u00ae Cortex\u00ae-A53 @1.4GHz",
                "MCU": "two ARM\u00ae Cortex\u00ae-R5F single core up to 800MHz",
                "RAM": "8 GB LPDDR4 32-Bit data bus with inline ECC (3200 MT/s)",
                "Flash": "Micro SD Card",
                "GPU": "PowerVR"
            }
        },
        "description": "The Texas Instruments SK-AM62P-LP starter kit (SK) evaluation module (EVM) is built around the AM62P display processor, which includes scalable Arm\u00ae Cortex\u00ae-A53 performance and embedded features, such as high-performance 3D-GPU, 4K video acceleration, and extensive peripherals. SK-AM62P-LP is for those looking to develop automotive and industrial applications, including automotive digital instrumentation, automotive displays, industrial HMI and more. It features an HDMI port for up to 4K 60fps displays, two ethernet ports, an M.2 expansion port for wireless connectivity or storage, and many other peripherals.",
        "shortDescription": "Powerful Texas Instruments Cortex\u00ae-A53 based device for embedded Linux.",
        "urlToClone": "https://github.com/lvgl/lv_port_texas_sk-am62p-lp.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/texas_instruments/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_port_texas_sk-am62p-lp/master/board_images/ti-sk-am62p-lp.webp",
        "buy_now_links": [
            "https://www.ti.com/tool/SK-AM62P-LP"
        ],
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Open the project folder and update the submodules: `git submodule update --init --recursive` \n2. Follw the guide in the [README](https://github.com/lvgl/lv_port_texas_sk-am62p-lp/blob/master/README.md#getting-started)",
        "settings": []
    },
    {
        "name": "i.MX 93 Evaluation Kit",
        "maintainer": "LVGL",
        "hostOperatingsystem": [
            "Linux"
        ],
        "environment": [
            "Yocto"
        ],
        "hardware": {
            "chipVendor": "NXP",
            "manufacturer": "NXP",
            "specs": {
                "MPU": "Dual Cortex-A55 @1.7GHz",
                "MCU": "Cortex-M33 @250MHz",
                "RAM": "2 GB LPDDR4X / LPDDR4 16-Bit data bus with inline ECC (3.7 GT/s)",
                "Flash": "16 GB eMMC5.1 Micro SD Card",
                "GPU": "PowerVR"
            }
        },
        "description": "The i.MX 93 applications processors are the first in the i.MX portfolio to integrate the scalable Arm Cortex-A55 core, bringing performance and energy efficiency to Linux\u00ae-based edge applications and the Arm Ethos\u2122-U65 microNPU, enabling developers to create more capable, cost-effective and energy-efficient ML applications. The i.MX 93 EVK for 11x11mm sample provides a platform for comprehensive evaluation of the i.MX 93 applications processors and also includes the ability to measure power consumption on the power rails. ",
        "shortDescription": "Powerful NXP Cortex\u00ae-A55 based device for embedded Linux.",
        "urlToClone": "https://github.com/lvgl/lv_port_nxp_imx93.git",
        "logos": [
            "https://raw.githubusercontent.com/lvgl/project-creator/master/meta/images/nxp/logo.svg"
        ],
        "image": "https://raw.githubusercontent.com/lvgl/lv_port_nxp_imx93/master/board_images/NXP-imx-93-evaluation-kit.webp",
        "buy_now_links": [
            "https://www.nxp.com/design/design-center/development-boards-and-designs/i-mx-evaluation-and-development-boards/i-mx-93-evaluation-kit:i.MX93EVK"
        ],
        "branches": [
            "release/v9.2"
        ],
        "getStartedInstructions": "1. Open the project folder and update the submodules: `git submodule update --init --recursive` \n2. Follow the guide in the [README](https://github.com/lvgl/lv_port_nxp_imx93#getting-started)",
        "settings": []
    }
]